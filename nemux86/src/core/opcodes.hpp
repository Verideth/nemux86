#pragma once

#include <cstdint>
#include <string>
#include <cstdint>

/*
 * EACH NUMBER AT THE END OF AN INSTRUCTION
 * EXAMPLE SLO_3, 3 BEING THE NUMBER, SHOWS
 * WHAT THE OVERRIDE INDEX IS. EACH INSTRUCTION
 * CAN HAVE OVERRIDES AND DIFFERENT REGISTERS
 * THAT ARE INPUTTED. EACH NUMBER REPRESENTS THAT
 * OVERRIDE.
 *
 * (SOME ARE THE SAME INSTRUCTION ALSO,
 * FOR EXAMPLE, NOP_9 IS EQUIVALENT TO NOP_10,
 * TAKING THE SAME REGISTERS_E, AND RETURNING THE
 * SAME FUNCTIONAL)
 * KEY:
 * KEY::
 * KEY:::
 * +00 +04 +08 +0C AND SO ON = CONTROL INSTRUCTIONS (MOSTLY, ACCORDING TO NESDEV)
 * +01 +05 +09 +0D AND SO ON = ALU OPERATIONS
 * +02 +06 +0A +0E AND SO ON = READ WRITE AND MODIFY INSTRUCTIONS
 * +03 +07 +0B +0F AND SO ON = UNOFFICIAL OPCODES.
 */
enum OPCODE_HEX
{
	
	BRK_1 = 0x00,
	ORA_1 = 0x01,
	STP_1 = 0x02,
	SLO_1 = 0x03,
	NOP_1 = 0x04,
	ORA_2 = 0x05,
	ASL_1 = 0x06,
	SLO_2 = 0x07,
	PHP_1 = 0x08,
	ORA_3 = 0x09,
	ASL_2 = 0x0A,
	ANC_1 = 0x0B,
	NOP_2 = 0x0C,
	ORA_4 = 0x0D,
	ASL_3 = 0x0E,
	SLO_3 = 0x0F,
	BPL_1 = 0x10,
	ORA_5 = 0x11,
	STP_2 = 0x12,
	SLO_4 = 0x13,
	NOP_3 = 0x14,
	ORA_6 = 0x15,
	ASL_4 = 0x16,
	SLO_5 = 0x17,
	CLC_1 = 0x18,
	ORA_7 = 0x19,
	NOP_4 = 0x1A,
	SLO_6 = 0x1B,
	NOP_5 = 0x1C,
	ORA_8 = 0x1D,
	ASL_5 = 0x1E,
	SLO_7 = 0x1F,
	JSR_1 = 0x20,
	AND_1 = 0x21,
	STP_3 = 0x22,
	RLA_1 = 0x23,
	BIT_1 = 0x24,
	AND_2 = 0x25,
	ROL_1 = 0x26,
	RLA_2 = 0x27,
	PLP_1 = 0x28,
	AND_3 = 0x29,
	ROL_2 = 0x2A,
	ANC_2 = 0x2B,
	BIT_2 = 0x2C,
	AND_4 = 0x2D,
	ROL_3 = 0x2E,
	RLA_3 = 0x2F,
	BMI_1 = 0x30,
	AND_5 = 0x31,
	STP_4 = 0x32,
	RLA_4 = 0x33,
	NOP_6 = 0x34,
	AND_6 = 0x35,
	ROL_4 = 0x36,
	RLA_5 = 0x37,
	SEC_1 = 0x38,
	AND_7 = 0x39,
	NOP_7 = 0x3A,
	RLA_6 = 0x3B,
	NOP_8 = 0x3C,
	AND_8 = 0x3D,
	ROL_5 = 0x3E,
	RLA_7 = 0x3F,
	RTI_1 = 0x40,
	EOR_1 = 0x41,
	STP_5 = 0x42,
	SRE_1 = 0x43,
	NOP_9 = 0x44,
	EOR_2 = 0x45,
	LSR_1 = 0x46,
	SRE_2 = 0x47,
	PHA_1 = 0x48,
	EOR_3 = 0x49,
	LSR_2 = 0x4A,
	ALR_1 = 0x4B,
	JMP_1 = 0x4C,
	EOR_4 = 0x4D,
	LSR_3 = 0x4E,
	SRE_3 = 0x4F,
	BVC_1 = 0x50,
	EOR_5 = 0x51,
	STP_6 = 0x52,
	SRE_4 = 0x53,
	NOP_10 = 0x54,
	EOR_6 = 0x55,
	LSR_4 = 0x56,
	SRE_5 = 0x57,
	CLI_1 = 0x58,
	EOR_7 = 0x59,
	NOP_11 = 0x5A,
	SRE_6 = 0x5B,
	NOP_12 = 0x5C,
	EOR_8 = 0x5D,
	LSR_5 = 0x5E,
	SRE_7 = 0x5F,
	RTS_1 = 0x60,
	ADC_1 = 0x61,
	STP_7 = 0x62,
	RRA_1 = 0x63,
	NOP_13 = 0x64,
	ADC_2 = 0x65,
	ROR_1 = 0x66,
	RRA_2 = 0x67,
	PLA_1 = 0x68,
	ADC_3 = 0x69,
	ROR_2 = 0x6A,
	ARR_1 = 0x6B,
	JMP_2 = 0x6C,
	ADC_4 = 0x6D,
	ROR_3 = 0x6E,
	RRA_3 = 0x6F,
	BVS_1 = 0x70,
	ADC_5 = 0x71,
	STP_8 = 0x72,
	RRA_4 = 0x73,
	NOP_14 = 0x74,
	ADC_6 = 0x75,
	ROR_4 = 0x76,
	RRA_5 = 0x77,
	SEI_1 = 0x78,
	ADC_7 = 0x79,
	NOP_15 = 0x7A,
	RRA_6 = 0x7B,
	NOP_16 = 0x7C,
	ADC_8 = 0x7D,
	ROR_5 = 0x7E,
	RRA_7 = 0x7F,
	NOP_17 = 0x80,
	STA_1 = 0x81,
	NOP_18 = 0x82,
	SAX_1 = 0x83,
	STY_1 = 0x84,
	STA_2 = 0x85,
	STX_1 = 0x86,
	SAX_2 = 0x87,
	DEY_1 = 0x88,
	NOP_19 = 0x89,
	TXA_1 = 0x8A,
	XAA_1 = 0x8B,
	STY_2 = 0x8C,
	STA_3 = 0x8D,
	STX_2 = 0x8E,
	SAX_3 = 0x8F,
	BCC_1 = 0x90,
	STA_4 = 0x91,
	STP_9 = 0x92,
	AHX_1 = 0x93,
	STY_3 = 0x94,
	STA_5 = 0x95,
	STX_3 = 0x96,
	SAX_4 = 0x97,
	TYA_1 = 0x98,
	STA_6 = 0x99,
	TXS_1 = 0x9A,
	TAS_1 = 0x9B,
	SHY_1 = 0x9C,
	STA_7 = 0x9D,
	SHX_1 = 0x9E,
	AHX_2 = 0x9F,
	LDY_1 = 0xA0,
	LDA_1 = 0xA1,
	LDX_1 = 0xA2,
	LAX_1 = 0xA3,
	LDY_2 = 0xA4,
	LDA_2 = 0xA5,
	LDX_2 = 0xA6,
	LAX_2 = 0xA7,
	TAY_1 = 0xA8,
	LDA_3 = 0xA9,
	TAX_1 = 0xAA,
	LAX_3 = 0xAB,
	LDY_3 = 0xAC,
	LDA_4 = 0xAD,
	LDX_3 = 0xAE,
	LAX_4 = 0xAF,
	BCS_1 = 0xB0,
	LDA_5 = 0xB1,
	STP_10 = 0xB2,
	LAX_5 = 0xB3,
	LDY_4 = 0xB4,
	LDA_6 = 0xB5,
	LDX_4 = 0xB6,
	LAX_6 = 0xB7,
	CLV_1 = 0xB8,
	LDA_7 = 0xB9,
	TSX_1 = 0xBA,
	LAS_1 = 0xBB,
	LDY_5 = 0xBC,
	LDA_8 = 0xBD,
	LDX_5 = 0xBE,
	LAX_7 = 0xBF,
	CPY_1 = 0xC0,
	CMP_1 = 0xC1,
	NOP_20 = 0xC2,
	DCP_1 = 0xC3,
	CPY_2 = 0xC4,
	CMP_2 = 0xC5,
	DEC_1 = 0xC6,
	DCP_2 = 0xC7,
	INY_1 = 0xC8,
	CMP_3 = 0xC9,
	DEX_1 = 0xCA,
	AXS_1 = 0xCB,
	CPY_3 = 0xCC,
	CMP_4 = 0xCD,
	DEC_2 = 0xCE,
	DCP_3 = 0xCF,
	BNE_1 = 0xD0,
	CMP_5 = 0xD1,
	STP_11 = 0xD2,
	DCP_4 = 0xD3,
	NOP_21 = 0xD4,
	CMP_6 = 0xD5,
	DEC_3 = 0xD6,
	DCP_5 = 0xD7,
	CLD_1 = 0xD8,
	CMP_7 = 0xD9,
	NOP_22 = 0xDA,
	DCP_6 = 0xDB,
	NOP_23 = 0xDC,
	CMP_8 = 0xDD,
	DEC_4 = 0xDE,
	DCP_7 = 0xDF,
	CPX_1 = 0xE0,
	SBC_1 = 0xE1,
	NOP_24 = 0xE2,
	ISC_1 = 0xE3,
	CPX_2 = 0xE4,
	SBC_2 = 0xE5,
	INC_1 = 0xE6,
	ISC_2 = 0xE7,
	INX_1 = 0xE8,
	SBC_3 = 0xE9,
	NOP_25 = 0xEA,
	SBC_4 = 0xEB,
	CPX_3 = 0xEC,
	SBC_5 = 0xED,
	INC_2 = 0xEE,
	ISC_3 = 0xEF,
	BEQ_1 = 0xF0,
	SBC_6 = 0xF1,
	STP_12 = 0xF2,
	ISC_4 = 0xF3,
	NOP_26 = 0xF4,
	SBC_7 = 0xF5,
	INC_3 = 0xF6,
	ISC_5 = 0xF7,
	SED_1 = 0xF8,
	SBC_8 = 0xF9,
	NOP_27 = 0xFA,
	ISC_6 = 0xFB,
	NOP_28 = 0xFC,
	SBC_9 = 0xFD,
	INC_4 = 0xFE,
	ISC_7 = 0xFF
};

/* structure for managing opcodes */
struct opcode_stru
{
	opcode_stru() = default;
	~opcode_stru() = default;
	opcode_stru(const opcode_stru& obj)
	{
		this->opcode_name = obj.opcode_name;
		this->bytecode = obj.bytecode;
		this->l_endian = obj.l_endian;
		this->b_endian = obj.b_endian;
		this->isolated_b_endian = obj.isolated_b_endian;
	}
	
	const opcode_stru& operator=(opcode_stru& obj)
	{
		this->opcode_name = obj.opcode_name;
		this->bytecode = obj.bytecode;
		this->l_endian = obj.l_endian;
		this->b_endian = obj.b_endian;
		this->isolated_b_endian = obj.isolated_b_endian;
		return *this;
	}
	
	std::string opcode_name = ""; // the name of the opcode in std::string format
	std::uint16_t bytecode = 0; // opcodes bytecode
	std::uint8_t l_endian = 0; // little endian
	std::uint16_t b_endian = 0; // big endian
	std::uint8_t isolated_b_endian = 0; // big endian in 2 bits using shift logic.
};